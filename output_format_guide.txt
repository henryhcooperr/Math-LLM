# Output Format Guide: Math Visualization System

This guide defines the standardized format for data exchange between the LLM component and the visualization system, ensuring consistent, accurate, and useful visualization generation.

## JSON Response Format

All communications between the LLM and the visualization system use a standardized JSON structure:

```json
{
  "explanation": "Clear explanation of the mathematical concept",
  "visualizationParams": {
    "type": "visualization_type",
    "title": "Visualization title",
    // Type-specific parameters...
  },
  "educationalContent": {
    "title": "Educational module title",
    "summary": "Brief summary of the concept",
    "steps": [
      {
        "title": "Step 1 title",
        "content": "Step 1 explanation"
      }
      // Additional steps...
    ],
    "keyInsights": [
      "Key insight 1",
      "Key insight 2"
    ],
    "exercises": [
      {
        "question": "Exercise question",
        "solution": "Exercise solution"
      }
      // Additional exercises...
    ]
  },
  "followUpQuestions": [
    "Suggested follow-up question 1?",
    "Suggested follow-up question 2?"
  ]
}
```

## Core Fields

### 1. explanation

A clear, conversational explanation of the mathematical concept that:
- Uses accessible language appropriate for the user's level
- Explains the concept's significance and applications
- Connects to related mathematical ideas
- References the visualization where appropriate

Example:
```json
"explanation": "The quadratic function f(x) = x² - 3x + 2 is a parabola that opens upward. It has two x-intercepts at x=1 and x=2, and a vertex at the point (1.5, -0.25). This function illustrates how the zeroes (roots) of a quadratic equation relate to its graphical representation."
```

### 2. visualizationParams

Contains all parameters needed to generate the visualization:

```json
"visualizationParams": {
  "type": "function2D",
  "title": "Quadratic Function",
  "expression": "x**2 - 3*x + 2",
  "domain": [-2, 4],
  "range": [-1, 5],
  "specialPoints": [
    {"x": 1, "y": 0, "label": "zero", "description": "x-intercept at x=1"},
    {"x": 2, "y": 0, "label": "zero", "description": "x-intercept at x=2"},
    {"x": 1.5, "y": -0.25, "label": "vertex", "description": "Minimum point"}
  ],
  "recommendedLibrary": "mafs"
}
```

Common parameters for all visualization types:
- `type` (required): The visualization type
- `title` (required): A descriptive title
- `recommendedLibrary` (optional): Suggested rendering library
- `annotations` (optional): Additional text annotations
- `colorScheme` (optional): Color scheme preferences

### 3. educationalContent

Educational material to accompany the visualization:

```json
"educationalContent": {
  "title": "Understanding Quadratic Functions",
  "summary": "Quadratic functions are polynomial functions of degree 2, represented by f(x) = ax² + bx + c, where a ≠ 0.",
  "steps": [
    {
      "title": "Identifying the Parabola's Direction",
      "content": "The coefficient 'a' determines whether the parabola opens upward (a > 0) or downward (a < 0)."
    },
    {
      "title": "Finding the Vertex",
      "content": "The vertex occurs at x = -b/(2a), which can be calculated as -(-3)/(2*1) = 1.5 for our function."
    },
    {
      "title": "Determining x-intercepts",
      "content": "x-intercepts occur where f(x) = 0. Using the quadratic formula or factoring, we get x = 1 and x = 2."
    }
  ],
  "keyInsights": [
    "The graph of a quadratic function is always a parabola",
    "The vertex represents the minimum (if a > 0) or maximum (if a < 0) value of the function",
    "The discriminant b² - 4ac determines the number of real roots"
  ],
  "exercises": [
    {
      "question": "How would the graph change if the function were f(x) = -(x² - 3x + 2)?",
      "solution": "The negative coefficient would cause the parabola to open downward, and the vertex would become a maximum instead of a minimum."
    },
    {
      "question": "Find the range of the function f(x) = x² - 3x + 2.",
      "solution": "Since the vertex is at (1.5, -0.25) and the parabola opens upward, the range is [-0.25, ∞)."
    }
  ]
}
```

### 4. followUpQuestions

Suggested questions to continue the learning journey:

```json
"followUpQuestions": [
  "How does changing the coefficient 'a' affect the shape of a quadratic function?",
  "Can you show the relationship between the quadratic formula and the graph?",
  "What is the discriminant and how does it relate to the number of x-intercepts?"
]
```

## Visualization Types and Their Parameters

### 1. function2D

For 2D mathematical functions (y = f(x)):

```json
{
  "type": "function2D",
  "title": "Sine Function",
  "expression": "Math.sin(x)",
  "domain": [-Math.PI * 2, Math.PI * 2],
  "range": [-1.5, 1.5],
  "gridLines": true,
  "specialPoints": [
    {"x": 0, "y": 0, "label": "origin"},
    {"x": Math.PI/2, "y": 1, "label": "maximum"}
  ],
  "derivatives": {
    "show": true,
    "order": 1,
    "color": "#FF0000"
  },
  "recommendedLibrary": "mafs"
}
```

### 2. functions2D

For multiple 2D functions on the same coordinate system:

```json
{
  "type": "functions2D",
  "title": "Sine and Cosine",
  "functions": [
    {
      "expression": "Math.sin(x)",
      "label": "sin(x)",
      "color": "#3090FF"
    },
    {
      "expression": "Math.cos(x)",
      "label": "cos(x)",
      "color": "#FF9030"
    }
  ],
  "domain": [-Math.PI * 2, Math.PI * 2],
  "range": [-1.5, 1.5],
  "gridLines": true,
  "recommendedLibrary": "mafs"
}
```

### 3. function3D

For 3D surfaces (z = f(x,y)):

```json
{
  "type": "function3D",
  "title": "Paraboloid",
  "expression": "x**2 + y**2",
  "domainX": [-3, 3],
  "domainY": [-3, 3],
  "range": [0, 10],
  "resolution": 64,
  "colormap": "viridis",
  "view": {
    "rotation": [0.5, 0.5, 0],
    "zoom": 0.8
  },
  "recommendedLibrary": "mathbox"
}
```

### 4. parametric2D

For parametric curves in 2D:

```json
{
  "type": "parametric2D",
  "title": "Circle via Parametric Equation",
  "parameterName": "t",
  "parameterRange": [0, 2 * Math.PI],
  "expressions": {
    "x": "2 * Math.cos(t)",
    "y": "2 * Math.sin(t)"
  },
  "domain": [-3, 3],
  "range": [-3, 3],
  "recommendedLibrary": "mafs"
}
```

### 5. parametric3D

For parametric curves and surfaces in 3D:

```json
{
  "type": "parametric3D",
  "title": "Helical Curve",
  "parameterType": "curve",
  "parameterNames": ["t"],
  "parameterRanges": [[0, 6 * Math.PI]],
  "expressions": {
    "x": "Math.cos(t)",
    "y": "Math.sin(t)",
    "z": "0.2 * t"
  },
  "domainX": [-1.5, 1.5],
  "domainY": [-1.5, 1.5],
  "domainZ": [0, 4 * Math.PI],
  "recommendedLibrary": "mathbox"
}
```

For parametric surfaces:

```json
{
  "type": "parametric3D",
  "title": "Torus",
  "parameterType": "surface",
  "parameterNames": ["u", "v"],
  "parameterRanges": [[0, 2 * Math.PI], [0, 2 * Math.PI]],
  "expressions": {
    "x": "(3 + Math.cos(v)) * Math.cos(u)",
    "y": "(3 + Math.cos(v)) * Math.sin(u)",
    "z": "Math.sin(v)"
  },
  "domainX": [-4, 4],
  "domainY": [-4, 4],
  "domainZ": [-1.5, 1.5],
  "resolution": 48,
  "recommendedLibrary": "mathbox"
}
```

### 6. vectorField

For vector fields in 2D or 3D:

```json
{
  "type": "vectorField",
  "title": "2D Vector Field",
  "dimensionality": "2D",
  "expressions": {
    "x": "y",
    "y": "-x"
  },
  "domain": [-3, 3],
  "range": [-3, 3],
  "density": 15,
  "normalize": true,
  "recommendedLibrary": "mafs"
}
```

### 7. geometry

For geometric constructions:

```json
{
  "type": "geometry",
  "title": "Triangle with Circumcircle",
  "elements": [
    {
      "type": "point",
      "id": "A",
      "coordinates": [0, 0],
      "label": "A",
      "color": "#FF0000"
    },
    {
      "type": "point",
      "id": "B",
      "coordinates": [4, 0],
      "label": "B",
      "color": "#FF0000"
    },
    {
      "type": "point",
      "id": "C",
      "coordinates": [2, 3],
      "label": "C",
      "color": "#FF0000"
    },
    {
      "type": "polygon",
      "vertices": ["A", "B", "C"],
      "id": "triangle",
      "color": "#3090FF",
      "fillOpacity": 0.2
    },
    {
      "type": "circle",
      "id": "circumcircle",
      "circumscribePoints": ["A", "B", "C"],
      "color": "#30FF90",
      "fillOpacity": 0.1
    }
  ],
  "domain": [-1, 5],
  "range": [-1, 4],
  "recommendedLibrary": "jsxgraph"
}
```

### 8. calculus

For calculus-specific visualizations:

```json
{
  "type": "calculus",
  "subtype": "integral",
  "title": "Area Under a Curve",
  "function": {
    "expression": "x**2",
    "color": "#3090FF"
  },
  "integral": {
    "lowerBound": 0,
    "upperBound": 2,
    "color": "#FF9030",
    "fillOpacity": 0.3,
    "approximation": {
      "method": "rectangles",
      "count": 10,
      "show": true
    }
  },
  "domain": [-0.5, 2.5],
  "range": [-0.5, 4.5],
  "recommendedLibrary": "mafs"
}
```

### 9. probabilityDistribution

For statistical distributions:

```json
{
  "type": "probabilityDistribution",
  "title": "Normal Distribution",
  "distribution": {
    "name": "normal",
    "parameters": {
      "mean": 0,
      "standardDeviation": 1
    }
  },
  "domain": [-4, 4],
  "range": [0, 0.5],
  "shade": {
    "regions": [
      {
        "from": -1,
        "to": 1,
        "label": "68% within 1σ",
        "color": "#3090FF"
      }
    ]
  },
  "statistics": {
    "showMean": true,
    "showMedian": true,
    "showStandardDeviation": true
  },
  "recommendedLibrary": "d3"
}
```

### 10. linearAlgebra

For linear algebra visualizations:

```json
{
  "type": "linearAlgebra",
  "subtype": "transformation",
  "title": "Linear Transformation",
  "space": "2D",
  "matrix": [
    [2, 1],
    [1, 1]
  ],
  "displayElements": {
    "grid": true,
    "unitVectors": true,
    "additionalVectors": [
      {
        "components": [1, 2],
        "color": "#FF9030",
        "label": "v"
      }
    ]
  },
  "animation": {
    "duration": 1.5,
    "enabled": true
  },
  "domain": [-5, 5],
  "range": [-5, 5],
  "recommendedLibrary": "mafs"
}
```

## Library-Specific Parameters

### 1. Mafs (React)

```json
"mafsSpecific": {
  "viewBox": { "x": [-5, 5], "y": [-5, 5] },
  "preserveAspectRatio": false,
  "pannable": true,
  "zoomable": true,
  "theme": "light"
}
```

### 2. MathBox

```json
"mathboxSpecific": {
  "camera": {
    "position": [3, 2, 1],
    "fov": 45
  },
  "scale": 1,
  "focus": 3,
  "plugins": ["core", "controls", "cursor"]
}
```

### 3. JSXGraph

```json
"jsxgraphSpecific": {
  "boundingBox": [-5, 5, 5, -5],
  "keepAspectRatio": true,
  "showNavigation": true,
  "pan": {
    "enabled": true,
    "needShift": false
  },
  "zoom": {
    "enabled": true,
    "factorX": 1.25,
    "factorY": 1.25
  }
}
```

### 4. D3.js

```json
"d3Specific": {
  "margin": { "top": 40, "right": 40, "bottom": 60, "left": 60 },
  "transitionDuration": 500,
  "responsiveResize": true,
  "tooltip": {
    "enabled": true,
    "format": ".2f"
  },
  "legend": {
    "position": "bottom",
    "columns": 2
  }
}
```

## Best Practices for Output Format

1. **Ensure Mathematical Accuracy**
   - Use precise mathematical expressions
   - Validate all ranges and domains
   - Double-check coordinate points for special features

2. **Prioritize Clarity**
   - Choose meaningful titles and labels
   - Use descriptive variable names
   - Include only relevant information in the visualization

3. **Adapt to Complexity**
   - For basic concepts, keep parameters simple
   - For advanced concepts, provide more detailed parameters
   - Balance visual complexity with educational clarity

4. **Handle Edge Cases**
   - Account for asymptotes and discontinuities
   - Consider domain and range limitations
   - Provide guidance for handling undefined regions

5. **Support Accessibility**
   - Include textual descriptions of visual features
   - Ensure color schemes work for color-blind users
   - Provide alternative explanations for visual concepts

## Testing and Validation

Before finalizing the output format:

1. Validate the JSON structure is well-formed
2. Ensure all required parameters are present
3. Check that expressions are valid JavaScript
4. Confirm ranges and domains are appropriate
5. Test rendering in the target library

## Example Complete Response

```json
{
  "explanation": "The sine and cosine functions are fundamental trigonometric functions with a beautiful relationship. They are essentially the same function, just shifted by π/2 radians (90 degrees). When plotted together, you can see this phase relationship clearly: when sine is at its maximum or minimum, cosine is at zero, and vice versa.",
  
  "visualizationParams": {
    "type": "functions2D",
    "title": "Sine and Cosine Functions",
    "functions": [
      {
        "expression": "Math.sin(x)",
        "label": "sin(x)",
        "color": "#4285F4"
      },
      {
        "expression": "Math.cos(x)",
        "label": "cos(x)",
        "color": "#EA4335"
      }
    ],
    "domain": [-6.28, 6.28],
    "range": [-1.5, 1.5],
    "gridLines": true,
    "xLabel": "x (radians)",
    "yLabel": "y",
    "xTicks": [
      {"value": -6.28, "label": "-2π"},
      {"value": -3.14, "label": "-π"},
      {"value": 0, "label": "0"},
      {"value": 3.14, "label": "π"},
      {"value": 6.28, "label": "2π"}
    ],
    "specialPoints": [
      {"x": 0, "y": 0, "label": "Origin"},
      {"x": 1.57, "y": 1, "label": "sin(π/2) = 1"},
      {"x": 0, "y": 1, "label": "cos(0) = 1"}
    ],
    "recommendedLibrary": "mafs"
  },
  
  "educationalContent": {
    "title": "The Relationship Between Sine and Cosine",
    "summary": "Sine and cosine are complementary functions related through the unit circle and a phase shift of π/2.",
    "steps": [
      {
        "title": "Unit Circle Representation",
        "content": "On the unit circle, cos(θ) is the x-coordinate and sin(θ) is the y-coordinate of the point at angle θ from the positive x-axis."
      },
      {
        "title": "Phase Shift Relationship",
        "content": "Cosine is the same as sine, but shifted by π/2: cos(x) = sin(x + π/2). Similarly, sin(x) = cos(x - π/2)."
      },
      {
        "title": "Pythagorean Identity",
        "content": "For any value of θ, sin²(θ) + cos²(θ) = 1. This reflects the fact that any point on the unit circle is at distance 1 from the origin."
      }
    ],
    "keyInsights": [
      "Sine and cosine have the same shape and amplitude, just shifted horizontally",
      "When sine reaches its maximum (1) or minimum (-1), cosine is at zero",
      "When cosine reaches its maximum (1) or minimum (-1), sine is at zero",
      "Both functions have a period of 2π (360 degrees), repeating the same values over each cycle"
    ],
    "exercises": [
      {
        "question": "If sin(θ) = 0.5, what are the possible values of cos(θ)?",
        "solution": "Using the Pythagorean identity sin²(θ) + cos²(θ) = 1, we can solve for cos(θ): cos²(θ) = 1 - sin²(θ) = 1 - 0.5² = 1 - 0.25 = 0.75. Therefore, cos(θ) = ±√0.75 = ±0.866."
      },
      {
        "question": "What is the phase difference between sine and cosine in degrees?",
        "solution": "The phase difference is π/2 radians, which is equivalent to 90 degrees."
      }
    ]
  },
  
  "followUpQuestions": [
    "How are sine and cosine related to the tangent function?",
    "Can you show me the unit circle representation of sine and cosine?",
    "What are the derivatives of sine and cosine functions?"
  ]
}
```

By following this output format guide, the LLM will generate consistent, structured data that the visualization system can reliably process to create accurate, educational mathematical visualizations.